import sys
import os
import inspect
import logging
import traceback
import re
from TrickUtils import *
from ParamUtils import *


#from StringIO import StringIO

# TBD: transfer constants to object params
nINDENT_STEP_WIDTH = 8	# TBD: transfer to config file
sEMPTY_BRICK = "    "
sEMPTY_OFFSET_BRICK = "    "
sLINED_BRICK = "----"
sSIDEKICK_FILE_NAME_TAG = "_"

# TBD: config file for filter regexes 
# has automatic indention incrementing
# TBD: automatic indention decrementing (search from caller names stack)
#	-	so far uses "RET()" -function
# https://opensourcehacker.com/2011/02/23/temporarily-capturing-python-logging-output-to-a-string-buffer/
# TBD: add logger module as parent

# !: python: http://code.activestate.com/recipes/411791-automatic-indentation-of-output-based-on-frame-sta/


# http://code.activestate.com/recipes/412603-stack-based-indentation-of-formatted-logging/
class clTrace(clParams):
	# wrapper to "logger" module
	#	-	combines logger configurability with higher level (eg. Notetab OTL file syntax) operations
	#=========================================================
	def __init__(me, sTraceFileAbsOrRelName, nSidekickFileUpdateThreshold=1028):  # python constructor
	#=========================================================
	
		if sTraceFileAbsOrRelName == "MISSING":
			print ("Trace log file '" + sTraceFileAbsOrRelName + "' is not created")
			me.bThisObjectIsOperable = False
			return
		else:
			print ("creates log file '"+ sTraceFileAbsOrRelName+"'")
	
		me.bThisObjectIsOperable = True # initial quess
		me.nSidekickTopicPosNbr = 0
		me.nCallStackDepthNow 	= 0
		me.nCallStackDepthPrev 	= 0
		me.asCallerFunctionNames = ["---empty---","---empty---","---empty---","---empty---","---empty---","---empty---","---empty---","---empty---"]  # for saving
		me.sTraceFileAbsOrRelName = sTraceFileAbsOrRelName
		me.nSidekickFileUpdateThreshold = nSidekickFileUpdateThreshold  # shorter texts are written to trace file, longer ones to sidekick file
		me.nIndentLevel = 0
		me.sIndent = ""
		me.sTraceLine = ""
		#me.oLogCapture = StringIO()
		me.sSidekickFileAbsOrRelName = ""
		me.sSidekickFilePlainName = ""  # needed for OTL links
		logging.basicConfig(format='%(message)s',
				datefmt='%m/%d/%Y %I:%M:%S %p',
				filename=me.sTraceFileAbsOrRelName,
				filemode='a',			# !: appends to existing file
				level=logging.INFO)
				
		me.oLogger = logging.getLogger('logger')
		# TBD: change constants to object params
		me.sPickRe = "^.*$" # initialization: all texts are written
		#print ("pick RE = '"+me.sPickRe+"'")
		# trace file opens/closes are handled by main script, not in objects
		
		clParams.__init__(me, "tracing", me) 
		

		
		(me.sTraceFilePathName, me.sTraceFilePlainName, me.sTraceFileBody, me.sTraceFileExt)	= getFileNameParts(me.sTraceFileAbsOrRelName)
		#-----------creates Notetab top ---------------------
		
		me.fhFile = open(me.sTraceFileAbsOrRelName,"w")   # overwrites old file
		me.fhFile.write(NOTETAB_OUTLINE_FILE_HEADING+"\n")
		sTopicNameLine = createOtlTopicHeading("The Log")
		me.fhFile.write("\n"+sTopicNameLine+"\n\n")
		me.fhFile.write("\nSTARTED: "+timeStamp('%Y-%m-%d %H:%M:%S')+"\n\n")
		me.fhFile.close()
		
		#----------------------------------------------------
		# TBD: configuration data reading from (JSON) file
		# logging.basicConfig(format='%(asctime)s %(message)s',
				# datefmt='%m/%d/%Y %I:%M:%S %p',
				# filename=me.sTraceFileAbsOrRelName,
				# filemode='a',			# !: appends to existing file
				# level=logging.INFO)
				

		me.createOtlSidekickFile(me.sTraceFileBody + sSIDEKICK_FILE_NAME_TAG + me.sTraceFileExt)   
		me.oLogger.info("created sidekick file '"+me.sSidekickFileAbsOrRelName+"'")
		
	# TBD: add method named "EXCEPTION(me, sText):"
		
	#=========================================================	
	def INFO(me, sText, sConf=""):  # generic function
	#=========================================================
		#return # to reduce slowness
		# http://stackoverflow.com/questions/11799290/get-function-callers-information-in-python
		# !: __FILE__, __LINE__, __FUNCTION__ : pythonhttp://stackoverflow.com/questions/6810999/how-to-determine-file-function-and-line-number
		# TBD: IF text contents > NN THEN create new topic to peer OTL file and put link to trace file
		if me.bThisObjectIsOperable == False:
			#print ("TRACE OBJECT IS NOT OPERABLE")
			return
		
		bIgnoreIndention		= False
		sOtlLinkToSidekickTopic = ""
		
		# TBD: add more "keyword" controls
		if "exception" in sConf:
			exctype, value = sys.exc_info()[:2]
			sExceptionText = str(exctype)+" "+str(value)
			sText = sText + " --- "+sExceptionText
		elif "topic" in sConf:  # indention must be ignoted
			# TBD: add more <conf> parameter alternatives to form the trace file
			sText = "h=\""+ sText +"\""
			#print ("creates heading for "+sText+"\n")
			bIgnoreIndention		= True
		else:
			abc = 123
		
		aoCallerFrameRecord 	= inspect.stack()[1]
		# aoCallerFrameRecord = inspect.stack()[2]  				# "index out of range"
		#aoCallerFrameRecord = inspect.stack()[0]					# takes THIS method as "root"	
		#oFrame				= aoCallerFrameRecord[1] 				# "... no attribute ..."
		oFrame				= aoCallerFrameRecord[0]
		oInfo				= inspect.getframeinfo(oFrame)
		sCallerFileName		= oInfo.filename					   # __FILE__	 
		sCallerFunctionName = oInfo.function					   # __FUNCTION__ 
		sCallerLineNbr		= str(oInfo.lineno)					   # __LINE__ 
		sNOTETAB_HYPERLINK_LINE_TAG = "::"+sCallerLineNbr+"^L"
		sCOLORIZER_TAG 		= "://"
		sFunctionName 		= ""
		bPutFunctionName 	= False  # initial quess
		nCallStackDepth = 0
		#----------- COLLECTS CALL STACK ----------------
		oFrame = inspect.currentframe()
		while True:
			try:
				oFrame = oFrame.f_back
				nCallStackDepth += 1
			except:
				break
		#------------------------------------------------
		sEmptyIndent = sEMPTY_BRICK * nCallStackDepth
		sLinedIndent = sLINED_BRICK * nCallStackDepth
		sDepth = str(nCallStackDepth)
		
		if nCallStackDepth < me.nCallStackDepthPrev:
			for i in range(nCallStackDepth+1, me.nCallStackDepthPrev+1): # clears "downstream" when return occurs
				me.asCallerFunctionNames[i] = "---empty---"

		# me.oLogger.info(arrayToStr(me.asCallerFunctionNames,"","caller stack: ", ))  # feature for debugging purposes 
		if me.asCallerFunctionNames[nCallStackDepth] != sCallerFunctionName:
			bPutFunctionName = True
						
		# me.oLogger.info(sEmptyIndent+sEMPTY_OFFSET_BRICK+"============= stack.depth/caller.function/caller.function.prev = '"+str(nCallStackDepth)+"'/'"+sCallerFunctionName+"'/'"+me.sCallerFunctionPrevName+"'")
		if bPutFunctionName == True: 
			me.oLogger.info(sEmptyIndent+sCallerFunctionName+sCOLORIZER_TAG+" ["+sDepth+"] -------------<>["+sCallerFileName+sNOTETAB_HYPERLINK_LINE_TAG+"]")

		match = re.search(me.sPickRe, sText)
		if match:  
			if len(sText) > me.nSidekickFileUpdateThreshold:
				me.nSidekickTopicPosNbr += 1
				sTopicPosNbr = str(me.nSidekickTopicPosNbr)
				sTopicName = sCallerFunctionName+"_"+sTopicPosNbr
				sOtlLinkToSidekickTopic = createOtlLink(me.sSidekickFilePlainName, sTopicName)
				me.oLogger.info(sEmptyIndent+sEMPTY_OFFSET_BRICK+sOtlLinkToSidekickTopic)
				me.createTopicToOtlSidekickFile(sText, sTopicName)
			else:
				if bIgnoreIndention == True:
					#print ("Tries to log "+sText\n")
					me.oLogger.info("\n\n")
					me.oLogger.info(sText)   # no indention: eg. for notetab outline topic heading creation
					me.oLogger.info("\n\n")
				else:
					#me.oLogger.info(sEmptyIndent+sEMPTY_OFFSET_BRICK+"============= stack.depth/caller.function = '"+str(nCallStackDepth)+"'/'"+sCallerFunctionName+"/")
					me.oLogger.info(sEmptyIndent+sEMPTY_OFFSET_BRICK+sText)
			# me.oLogger.log(me.TRON, me.sIndent+sEMPTY_OFFSET_BRICK+sText)

		me.asCallerFunctionNames[nCallStackDepth] = sCallerFunctionName
		me.nCallStackDepthPrev = nCallStackDepth 

	#=========================================================	
	def setPickRe(me, sPickRe):
	#=========================================================
	# for setting and changing filter which lines will be written to trace file
		if sPickRe == "MISSING":
			sPickRe = "^.*$"
		me.INFO("start selecting lines matching to '"+sPickRe+"'")
		me.sPickRe = sPickRe

	#=========================================================	
	def CLOSE(me):
	#=========================================================
		if me.bThisObjectIsOperable:
			me.fhFile.close()

	#=========================================================	
	def decIndent(me):
	#=========================================================
		if me.nIndentLevel >= nINDENT_STEP_WIDTH:  #  no negative indents
			me.nIndentLevel -=	nINDENT_STEP_WIDTH	# !: Python
		else:
			a=123
			# TBD: Trace ERROR here
		me.sIndent = ''.join([' ' for s in range(me.nIndentLevel)])	 # !: Python string multiplication
	#=========================================================	
	def incIndent(me):
	#=========================================================
		me.nIndentLevel +=	nINDENT_STEP_WIDTH
		me.sIndent = ''.join([' ' for s in range(me.nIndentLevel)])	 # !: Python string multiplication

	#=========================================================	
	def createOtlSidekickFile(me, sFilePlainName):
	#=========================================================
		# logger is not used to update the sidekick file (for simplicity)
		# a Peer file for trace file. 
		# Long log texts are written there as topics and corresponding OTL links are written to trace file
		me.sSidekickFileAbsOrRelName = me.sTraceFilePathName+sFilePlainName # adds string inside file name
		me.sSidekickFilePlainName = sFilePlainName
		me.fhSidekickFile = open(me.sSidekickFileAbsOrRelName,"w")  # overwrites old file
		#print (me.sSidekickFileAbsOrRelName)
		me.fhSidekickFile.write(NOTETAB_OUTLINE_FILE_HEADING+"\n")

	#=========================================================		
	def createTopicToOtlSidekickFile(me, sText, sOngoingContext):
	#=========================================================
		# logger is not used to update the sidekick file (for simplicity)
		#print("\nsidekick trace topic name = '"+sOngoingContext+"'")
		sTopicNameLine = createOtlTopicHeading(sOngoingContext)
		me.fhSidekickFile.write("\n"+sTopicNameLine+"\n")
		me.fhSidekickFile.write("\n"+sText+"\n")
		